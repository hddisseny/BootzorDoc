@using BootzorComponents.Components.Accordion
@using BootzorComponents.Components.Alert
@using BootzorComponents.Components.Dialog
@using BootzorComponents.ZorEnums;
@using static BootzorComponents.Components.Dialog.ZorDialog;

@page "/components/dialog"

<PageTitle>BlazorComponents - Bootzor</PageTitle>
  
<div class="appBootzor">
    <header>
        <BCHeader/>
    </header>
    <div class="appContent responsive"> 
        <BCNSidebar/> 

        <BCArticleSection Title="Accordion">
            <Description>
                <p>Add dialog to show any confirmation box or alert.</p>
                <p><b>&#60;ZorDialog&#62;</b></p>
            </Description>

            <ComponentParameters>
                                
                <ParameterSection>
                    <Name>Title</Name>
                    <Type>RenderFragment</Type>
                    <TypeDescription>fragment</TypeDescription>
                    <Description>
                        <p>Title of the modal.</p>
                    </Description>
                </ParameterSection>                  
                
                <ParameterSection>
                    <Name>Content</Name>
                    <Type>RenderFragment</Type>
                    <TypeDescription>fragment</TypeDescription>
                    <Description>
                        <p>Content of the modal.</p>
                    </Description>
                </ParameterSection>  
                
                <ParameterSection>
                    <Name>ShowModal</Name>
                    <Type>bool</Type>
                    <TypeDescription>true | false</TypeDescription>
                    <Description>
                        <p>Indicates if the modal has to appear.</p>
                    </Description>
                </ParameterSection>            
                
                <ParameterSection>
                    <Name>ResultModal</Name>
                    <Type>EventCallback&#60;bool&#62;</Type>
                    <Description>
                        <p>EventCallback to have the result when press a button cancel or ok.</p>
                    </Description>
                </ParameterSection>   
                
                           
                <ParameterSection>
                    <Name>Overlay</Name>
                    <Type>bool</Type>
                    <TypeDescription>true | false</TypeDescription>
                    <Description>
                        <p>Indicate if the overlay need to appear or not.</p>
                    </Description>
                </ParameterSection>
                
                <ParameterSection>
                    <Name>Buttons</Name>
                    <Type>ZorDialog.DialogButtons</Type>
                    <TypeDescription>Ok | OkCancel | Cancel</TypeDescription>
                    <Description>
                        <p>Indicates the number and type of buttons.</p>
                    </Description>
                </ParameterSection> 
                

                <ParameterSection>
                    <Name>Position</Name>
                    <Type>BootzorComponents.ZorEnums.Position</Type>
                    <TypeDescription>top | TopLeft | TopRight | bottom | BottomLeft | BottomRight | Center</TypeDescription>
                    <Description>
                        <p>Position of the dialog.</p>
                    </Description>
                </ParameterSection>    
                
                <ParameterSection>
                    <Name>Effect</Name>
                    <Type>BootzorComponents.ZorEnums.Effect</Type>
                    <TypeDescription>None | Transition | Shadow</TypeDescription>
                    <Description>
                        <p>Effect of the dialog.</p>
                    </Description>
                </ParameterSection>                    
                
                <ParameterSection>
                    <Name>Icon</Name>
                    <Type>BootzorComponents.ZorEnums.DialogIcon</Type>
                    <TypeDescription>None | Information | Warning | Question</TypeDescription>
                    <Description>
                        <p>Icon in the content of the modal.</p>
                    </Description>
                </ParameterSection>     
                
                <ParameterSection>
                    <Name>Color</Name>
                    <Type>BootzorComponents.ZorEnums.Color</Type>
                    <TypeDescription>SmoothWhite | White | Dark | Blue | Orange</TypeDescription>
                    <Description>
                        <p>Color of the modal.</p>
                    </Description>
                </ParameterSection>    


            </ComponentParameters>

            <Example>
                &#60;<b>ZorDialog</b> <i>DialogType</i>="DialogPosition.OkCancel"
                    <i>ResultModal</i>="EventCallback&#60;bool&#62;"
                    <i>Position</i>="DialogPosition.Top"
                    <i>Overlay</i> = true 
                    <i>ShowDialog</i> = true
                    <i>DialogEffect</i> = "Effect.Transition"
                    <i>Icon</i> = "DialogIcon.Information"  &#62;

                    &#60;Title&#62;
                        &#60;p&#62;Title&#60;/p&#62;
                    &#60;/Title&#62;
                    
                    &#60;Content&#62;
                        &#60;p&#62;FragmentRender Content&#60;/p&#62;
                    &#60;/Content&#62;

                &#60;/<b>ZorDialog</b>&#62;
            </Example>

            
            <Result>
                <h4>Results with None Effect</h4>
                <button @onclick="@(() => ShowModal(Position.Top, Effect.None, true))" >Dialog Top</button>
                <button @onclick="@(() => ShowModal(Position.TopLeft,Effect.None,true))" >Dialog TopLeft</button>
                <button @onclick="@(() => ShowModal(Position.TopRight,Effect.None,true))" >Dialog TopRight</button>
                <button @onclick="@(() => ShowModal(Position.Bottom,Effect.None,true))" >Dialog Bottom</button>
                <button @onclick="@(() => ShowModal(Position.BottomRight,Effect.None,true))" >Dialog BottomRight</button>
                <button @onclick="@(() => ShowModal(Position.BottomLeft,Effect.None,true))" >Dialog BottomLeft</button>
                <button @onclick="@(() => ShowModal(Position.Center,Effect.None,true))" >Dialog Center</button>
                <button @onclick="@(() => ShowModal(Position.Top,Effect.None,false))" >Dialog without owerlay</button>
                
                <h4>Results with Transiction Effect</h4>
                <button @onclick="@(() => ShowModal(Position.Top,Effect.Transition,true))" >Dialog Top</button>
                <button @onclick="@(() => ShowModal(Position.TopLeft,Effect.Transition,true))" >Dialog TopLeft</button>
                <button @onclick="@(() => ShowModal(Position.TopRight,Effect.Transition,true))" >Dialog TopRight</button>
                <button @onclick="@(() => ShowModal(Position.Bottom,Effect.Transition,true))" >Dialog Bottom</button>
                <button @onclick="@(() => ShowModal(Position.BottomRight,Effect.Transition,true))" >Dialog BottomRight</button>
                <button @onclick="@(() => ShowModal(Position.BottomLeft,Effect.Transition,true))" >Dialog BottomLeft</button>
                <button @onclick="@(() => ShowModal(Position.Center,Effect.Transition,true))" >Dialog Center</button>
                <button @onclick="@(() => ShowModal(Position.Top,Effect.Transition,false))" >Dialog without owerlay</button>
                
                <h4>Results with Shadow Effect</h4>
                <button @onclick="@(() => ShowModal(Position.Top,Effect.Shadow,true))" >Dialog Top</button>
                <button @onclick="@(() => ShowModal(Position.TopLeft,Effect.Shadow,true))" >Dialog TopLeft</button>
                <button @onclick="@(() => ShowModal(Position.TopRight,Effect.Shadow,true))" >Dialog TopRight</button>
                <button @onclick="@(() => ShowModal(Position.Bottom,Effect.Shadow,true))" >Dialog Bottom</button>
                <button @onclick="@(() => ShowModal(Position.BottomRight,Effect.Shadow,true))" >Dialog BottomRight</button>
                <button @onclick="@(() => ShowModal(Position.BottomLeft,Effect.Shadow,true))" >Dialog BottomLeft</button>
                <button @onclick="@(() => ShowModal(Position.Center,Effect.Shadow,true))" >Dialog Center</button>
                <button @onclick="@(() => ShowModal(Position.Top,Effect.Shadow,false))" >Dialog without owerlay</button>
                
                <h4>Results with Transiction Effect Icon Information</h4>
                <button @onclick="@(() => ShowModalIcon(Position.Top,Effect.Transition,true,DialogIcon.Information))" >Dialog Top</button>
                <button @onclick="@(() => ShowModalIcon(Position.TopLeft,Effect.Transition,true,DialogIcon.Information))" >Dialog TopLeft</button>
                <button @onclick="@(() => ShowModalIcon(Position.TopRight,Effect.Transition,true,DialogIcon.Information))" >Dialog TopRight</button>
                <button @onclick="@(() => ShowModalIcon(Position.Bottom,Effect.Transition,true,DialogIcon.Information))" >Dialog Bottom</button>
                <button @onclick="@(() => ShowModalIcon(Position.BottomRight,Effect.Transition,true,DialogIcon.Information))" >Dialog BottomRight</button>
                <button @onclick="@(() => ShowModalIcon(Position.BottomLeft,Effect.Transition,true,DialogIcon.Information))" >Dialog BottomLeft</button>
                <button @onclick="@(() => ShowModalIcon(Position.Center,Effect.Transition,true,DialogIcon.Information))" >Dialog Center</button>
                <button @onclick="@(() => ShowModalIcon(Position.Top,Effect.Transition,false,DialogIcon.Information))" >Dialog without owerlay</button>
      
                <h4>Results with Transiction Effect Icon warning</h4>
                <button @onclick="@(() => ShowModalIcon(Position.Top,Effect.Transition,true,DialogIcon.Warning))" >Dialog Top</button>
                <button @onclick="@(() => ShowModalIcon(Position.TopLeft,Effect.Transition,true,DialogIcon.Warning))" >Dialog TopLeft</button>
                <button @onclick="@(() => ShowModalIcon(Position.TopRight,Effect.Transition,true,DialogIcon.Warning))" >Dialog TopRight</button>
                <button @onclick="@(() => ShowModalIcon(Position.Bottom,Effect.Transition,true,DialogIcon.Warning))" >Dialog Bottom</button>
                <button @onclick="@(() => ShowModalIcon(Position.BottomRight,Effect.Transition,true,DialogIcon.Warning))" >Dialog BottomRight</button>
                <button @onclick="@(() => ShowModalIcon(Position.BottomLeft,Effect.Transition,true,DialogIcon.Warning))" >Dialog BottomLeft</button>
                <button @onclick="@(() => ShowModalIcon(Position.Center,Effect.Transition,true,DialogIcon.Warning))" >Dialog Center</button>
                <button @onclick="@(() => ShowModalIcon(Position.Top,Effect.Transition,false,DialogIcon.Warning))" >Dialog without owerlay</button>
                                
                <h4>Results with Transiction Effect Icon Question</h4>
                <button @onclick="@(() => ShowModalIcon(Position.Top,Effect.Transition,true,DialogIcon.Question))" >Dialog Top</button>
                <button @onclick="@(() => ShowModalIcon(Position.TopLeft,Effect.Transition,true,DialogIcon.Question))" >Dialog TopLeft</button>
                <button @onclick="@(() => ShowModalIcon(Position.TopRight,Effect.Transition,true,DialogIcon.Question))" >Dialog TopRight</button>
                <button @onclick="@(() => ShowModalIcon(Position.Bottom,Effect.Transition,true,DialogIcon.Question))" >Dialog Bottom</button>
                <button @onclick="@(() => ShowModalIcon(Position.BottomRight,Effect.Transition,true,DialogIcon.Question))" >Dialog BottomRight</button>
                <button @onclick="@(() => ShowModalIcon(Position.BottomLeft,Effect.Transition,true,DialogIcon.Question))" >Dialog BottomLeft</button>
                <button @onclick="@(() => ShowModalIcon(Position.Center,Effect.Transition,true,DialogIcon.Question))" >Dialog Center</button>
                <button @onclick="@(() => ShowModalIcon(Position.Top,Effect.Transition,false,DialogIcon.Question))" >Dialog without owerlay</button>

                <h4>Results with Transiction Effect Icon Question Colors</h4>
                <button @onclick="@(() => ShowModalIconColor(Position.Top,Effect.Transition,true,DialogIcon.Question, Color.SmoothWhite))" >Color SmoothWhite</button>
                <button @onclick="@(() => ShowModalIconColor(Position.TopLeft,Effect.None,true,DialogIcon.None, Color.White))" >Color White</button>
                <button @onclick="@(() => ShowModalIconColor(Position.TopRight,Effect.Transition,true,DialogIcon.Warning, Color.Dark))" >Color Dark</button>
                <button @onclick="@(() => ShowModalIconColor(Position.Bottom,Effect.Transition,true,DialogIcon.Information, Color.Blue))" >Color Blue</button>
                <button @onclick="@(() => ShowModalIconColor(Position.BottomRight,Effect.None,true,DialogIcon.Warning, Color.Orange))" >Color Orange</button>


                <ZorDialog  @ref="zorDialog"
                    Buttons="DialogButtons.OkCancel"
                    ResultModal="EventResult"
                    DialogPosition=@Position
                    ShowDialog=@ShowDialog
                    Overlay=@ShowOverlay
                    DialogEffect=@DialogEffect
                    Icon=@DialogIcon
                    DialogColor=@DialogColor>

                    <Title> 
                        Dialog title
                    </Title>
                    
                    <Content>
                        This is the Content! 
                    </Content>

                </ZorDialog>

            </Result>

        </BCArticleSection> 
    </div>
</div>

@code{

    public ZorDialog? zorDialog;

    private bool ShowDialog { get; set; } = false;
    private Position Position { get; set; } = Position.Top; 
    private bool ShowOverlay { get; set; }= true;
    private Effect DialogEffect { get; set; } = Effect.Transition;
    private DialogIcon DialogIcon { get; set; } = DialogIcon.None;
    private Color DialogColor { get; set; } = Color.SmoothWhite; 

    public void ShowModal(Position position, Effect effect, bool showOverlay)
    {
        ShowOverlay = showOverlay;
        DialogColor = Color.SmoothWhite;
        Position = position;
        ShowDialog = true;
        DialogEffect = effect;
    }    

    public void ShowModalIcon(Position position, Effect effect, bool showOverlay, DialogIcon icon)
    {
        DialogIcon = icon;
        ShowModal(position, effect, showOverlay);
    }    

    public void ShowModalIconColor(Position position, Effect effect, bool showOverlay, DialogIcon icon, Color color)
    {
        DialogIcon = icon;
        DialogColor = color;
        ShowOverlay = showOverlay;
        Position = position;
        ShowDialog = true;
        DialogEffect = effect;
    }

    public void EventResult(bool result)
    {
        ShowDialog = false;
    }
}